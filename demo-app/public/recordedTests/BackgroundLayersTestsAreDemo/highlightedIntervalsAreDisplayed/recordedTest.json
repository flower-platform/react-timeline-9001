{"slides":[{"screenshot":"HighlightedInterval_interval_0","sourceFile":"BackgroundLayersTestsAreDemo.tsx","sourceLine":17}],"sourceFiles":{"BackgroundLayersTestsAreDemo.tsx":"import { Only, Scenario, render, tad } from \"@famiprog-foundation/tests-are-demo\";\nimport { Main } from \"../stories/backgroundLayer/BackgroundLayer.stories\";\nimport { dateAndHourOfCurrentMonth } from \"../stories/sampleData\";\nimport {PARENT_ELEMENT, Timeline, getPixelAtTime, getPixelsFromDuration, highlightedIntervalTestIds} from \"@famiprog-foundation/react-gantt\";\nimport moment from \"moment\";\n\nexport class BackgroundLayersTestsAreDemo {\n    async before() {\n        render(<Main/>);\n    }\n    \n    @Scenario(\"The highlighted intervals are correctly displayed\")\n    async highlightedIntervalsAreDisplayed() {\n        const ganttLeftOffset = PARENT_ELEMENT(tad.getObjectViaCheat(Timeline).props.componentId).getBoundingClientRect().left;\n\n        var interval = tad.screenCapturing.getByTestId(highlightedIntervalTestIds.interval + \"_0\");\n        await tad.assertWaitable.exists(interval);\n        await tad.assertWaitable.equal(Math.round(interval.getBoundingClientRect().x - ganttLeftOffset), this.getPixelsAtDate(dateAndHourOfCurrentMonth(4)));\n        await tad.assertWaitable.equal(interval.getBoundingClientRect().width, this.getPixelsFromDuration(dateAndHourOfCurrentMonth(4), dateAndHourOfCurrentMonth(6)));\n\n        interval = tad.screenCapturing.getByTestId(highlightedIntervalTestIds.interval + \"_1\");\n        await tad.assertWaitable.exists(interval);\n        await tad.assertWaitable.equal(Math.round(interval.getBoundingClientRect().x - ganttLeftOffset), this.getPixelsAtDate(dateAndHourOfCurrentMonth(11)));\n        await tad.assertWaitable.equal(interval.getBoundingClientRect().width, this.getPixelsFromDuration(dateAndHourOfCurrentMonth(11), dateAndHourOfCurrentMonth(13)));\n\n        interval = tad.screenCapturing.getByTestId(highlightedIntervalTestIds.interval + \"_2\");\n        await tad.assertWaitable.exists(interval);\n        await tad.assertWaitable.equal(Math.round(interval.getBoundingClientRect().x - ganttLeftOffset), this.getPixelsAtDate(dateAndHourOfCurrentMonth(18)));\n        await tad.assertWaitable.equal(interval.getBoundingClientRect().width, this.getPixelsFromDuration(dateAndHourOfCurrentMonth(18), dateAndHourOfCurrentMonth(20)));\n\n        interval = tad.screenCapturing.getByTestId(highlightedIntervalTestIds.interval + \"_3\");\n        await tad.assertWaitable.exists(interval);\n        await tad.assertWaitable.equal(Math.round(interval.getBoundingClientRect().x - ganttLeftOffset), this.getPixelsAtDate(dateAndHourOfCurrentMonth(25)));\n        await tad.assertWaitable.equal(interval.getBoundingClientRect().width, this.getPixelsFromDuration(dateAndHourOfCurrentMonth(25), dateAndHourOfCurrentMonth(27)));\n\n        interval = tad.screenCapturing.getByTestId(highlightedIntervalTestIds.interval + \"_4\");\n        await tad.assertWaitable.exists(interval);\n        await tad.assertWaitable.equal(Math.round(interval.getBoundingClientRect().x - ganttLeftOffset), this.getPixelsAtDate(dateAndHourOfCurrentMonth(1)));\n        await tad.assertWaitable.equal(interval.getBoundingClientRect().width, this.getPixelsFromDuration(dateAndHourOfCurrentMonth(1), dateAndHourOfCurrentMonth(2)));\n\n        interval = tad.screenCapturing.getByTestId(highlightedIntervalTestIds.interval + \"_5\");\n        await tad.assertWaitable.exists(interval);\n        await tad.assertWaitable.equal(Math.round(interval.getBoundingClientRect().x - ganttLeftOffset), this.getPixelsAtDate(dateAndHourOfCurrentMonth(15)));\n        await tad.assertWaitable.equal(interval.getBoundingClientRect().width, this.getPixelsFromDuration(dateAndHourOfCurrentMonth(15), dateAndHourOfCurrentMonth(18)));\n\n        interval = tad.screenCapturing.getByTestId(highlightedIntervalTestIds.interval + \"_6\");\n        await tad.assertWaitable.exists(interval);\n        await tad.assertWaitable.equal(Math.round(interval.getBoundingClientRect().x - ganttLeftOffset), this.getPixelsAtDate(dateAndHourOfCurrentMonth(20, 19)));\n        await tad.assertWaitable.equal(interval.getBoundingClientRect().width, this.getPixelsFromDuration(dateAndHourOfCurrentMonth(20, 19), dateAndHourOfCurrentMonth(21, 10)));\n    }\n\n    getPixelsAtDate(date) {\n        const timeline = tad.getObjectViaCheat(Timeline);\n        return Math.round(getPixelAtTime(moment(date), timeline.getStartDate(), timeline.getEndDate(), timeline.getTimelineWidth(undefined)));\n    }\n    getPixelsFromDuration(start, end) {\n        const timeline = tad.getObjectViaCheat(Timeline);\n        return Math.round(getPixelsFromDuration(moment(end).diff(start, \"milliseconds\"), timeline.getStartDate(), timeline.getEndDate(), timeline.getTimelineWidth(undefined), timeline.getTimelineSnap()));\n\n    }\n}"},"duration":36,"error":"Error: Uncaught TypeError: Cannot read properties of null (reading 'recomputeGridSize') (http://localhost:3000/@fs/home/poweruser/git/react-timeline-10000/src/timeline.js:433)\n\t  at _global.onerror [fn(new Error(err + ' (' + url + ':' + line + ')'));] (http://localhost:3000/node_modules/mocha/browser-entry.js:75:10)"}