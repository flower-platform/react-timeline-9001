{"slides":[{"screenshot":"SelectionStory_selectedItemsSpan","sourceFile":"SelectedItemsTestsAreDemo.tsx","sourceLine":193}],"sourceFiles":{"SelectedItemsTestsAreDemo.tsx":"import { Only, Scenario, ScenarioOptions, render, tad } from \"@famiprog-foundation/tests-are-demo\";\nimport { assert } from \"chai\";\nimport { Selection, selectionStoryTestIds } from \"../stories/contextMenuAndSelection/ContextMenuAndSelection.stories\";\nimport { someTasks } from \"../stories/sampleData\";\nimport Timeline, { timelineTestids as testids } from \"../../../src/timeline\";\nimport { rightClick } from \"./testUtils\";\n\n/**\n* @author Daniela Buzatu\n*/\nexport class SelectedItemsTestsAreDemo {\n    async before() {\n        render(<Selection />);\n    }\n\n    @Scenario(\"WHEN click on a segment, THEN only that segment is selected\")\n    @ScenarioOptions({linkWithNextScenario: true}) \n    async whenClickOnASegment() {\n        // WHEN left click, THEN element is selected\n        await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.item + \"_2\"));\n        await this.assertOnlyExpectedSegmentsAreSelected([2]);\n\n        //=======HIDDEN TESTS (Not interesting for the user)==========\n        tad.demoForEndUserHide();\n\n        // WHEN left click again on same element, THEN the same element is selected\n        await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.item + \"_2\"));\n        await this.assertOnlyExpectedSegmentsAreSelected([2], true);\n        \n        // ==Right click can be used also for selecting segments. It works the same as left click (except that right click on a selected segment doesn't change the selection)== \n        // GIVEN nothing is selected\n        await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.row + \"_1\"));\n\n        // WHEN right click, THEN element is selected\n        rightClick(tad.screenCapturing.getByTestId(testids.item + \"_4\"));\n        await this.assertOnlyExpectedSegmentsAreSelected([4], true);\n\n        // WHEN right click again on another element, THEN the new element is selected\n        rightClick(tad.screenCapturing.getByTestId(testids.item + \"_5\"));\n        await this.assertOnlyExpectedSegmentsAreSelected([5], true);\n\n        // WHEN right click again on same element, THEN the same element is selected\n        rightClick(tad.screenCapturing.getByTestId(testids.item + \"_5\"));\n        await this.assertOnlyExpectedSegmentsAreSelected([5], true);\n\n        // GIVEN many segments are selected, WHEN right click one of them THEN the selection doesn't change\n        await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.item + \"_1\"));\n        await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.item + \"_2\"), { ctrlKey: true });\n        rightClick(tad.screenCapturing.getByTestId(testids.item + \"_1\"));\n        await this.assertOnlyExpectedSegmentsAreSelected([1, 2], true);\n        \n        // restore selection for the next scenario\n        await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.item + \"_2\"));\n        tad.demoForEndUserShow();\n    }\n\n    @Scenario(\"WHEN click on another segment, THEN only that segment is selected (so the previously selected segment is no more selected)\")\n    @ScenarioOptions({linkWithNextScenario: true})\n    async whenClickAnotherSegment() {\n        tad.cc(undefined);\n         // WHEN left click again on another element, THEN the new element is selected\n         await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.item + \"_3\"));\n         await this.assertOnlyExpectedSegmentsAreSelected([3]);\n    }\n\n    @Scenario(\"WHEN CTRL + click on a segment, THEN that segment is ADDED to the selection, AND both are now selected\")\n    @ScenarioOptions({linkWithNextScenario: true})\n    async whenCTRLClickOnASegment() {\n        // left click + CTRL on another element, THEN the new element is added to selection\n        tad.cc(\"With CTRL Key pressed\");\n        await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.item + \"_0\"), { ctrlKey: true });\n        await this.assertOnlyExpectedSegmentsAreSelected([0, 3]);\n        \n        //=======HIDDEN TESTS (Not interesting for the user)==========\n        tad.demoForEndUserHide();\n\n        // WHEN left click + SHIFT on another element, THEN the new element is added to selection\n        await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.item + \"_4\"), { shiftKey: true });\n        await this.assertOnlyExpectedSegmentsAreSelected([0, 3, 4], true);\n\n        // WHEN left click + SHIFT on same element, THEN the element is removed from selection\n        await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.item + \"_4\"), { shiftKey: true });\n        await this.assertOnlyExpectedSegmentsAreSelected([0, 3], true);\n\n        // WHEN right click + CTRL on another element, THEN the new element is added to selection\n        rightClick(tad.screenCapturing.getByTestId(testids.item + \"_4\"), { ctrlKey: true });\n        await this.assertOnlyExpectedSegmentsAreSelected([0, 3, 4], true);\n\n        // WHEN right click + CTRL on same element, THEN the selection doesn't change\n        rightClick(tad.screenCapturing.getByTestId(testids.item + \"_4\"), { ctrlKey: true });\n        await this.assertOnlyExpectedSegmentsAreSelected([0, 3, 4], true);\n\n        // WHEN right click + SHIFT on another element, THEN the new element is added to selection\n        rightClick(tad.screenCapturing.getByTestId(testids.item + \"_5\"), { shiftKey: true });\n        await this.assertOnlyExpectedSegmentsAreSelected([0, 3, 4, 5], true);\n\n        // WHEN right click + SHIFT on same element, THEN the selection doesn't change\n        rightClick(tad.screenCapturing.getByTestId(testids.item + \"_5\"), { shiftKey: true });\n        await this.assertOnlyExpectedSegmentsAreSelected([0, 3, 4, 5], true);\n\n        // restore selection for the next scenario\n        await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.item + \"_0\"));\n        await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.item + \"_3\"), { ctrlKey: true });\n        tad.demoForEndUserShow();\n    }\n\n    @Scenario(\"WHEN CTRL + click on a selected segment, THEN that segment is REMOVED from the selection, AND only one is now selected\")\n    @ScenarioOptions({linkWithNextScenario: true})\n    async whenCTRLClickOnASelectedSegment() {\n        // WHEN left click + CTRL on same element, THEN the element is removed from selection\n        tad.cc(\"With CTRL Key pressed\");\n        await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.item + \"_3\"), { ctrlKey: true });\n        await this.assertOnlyExpectedSegmentsAreSelected([0]);\n    }\n\n    @Scenario(\"WHEN CTRL + click outside segments, THEN the selection doesn't change\")\n    @ScenarioOptions({linkWithNextScenario: true}) \n    async whenCTRLClickOutside() {\n        // When I click outside + Ctrl key, THEN selection doesn't change\n        tad.cc(\"Click outside with CTRL Key pressed\");\n        await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.row + \"_1\"), { ctrlKey: true });\n        await this.assertOnlyExpectedSegmentsAreSelected([0]);\n\n        //=======HIDDEN TESTS (Not interesting for the user)==========\n        // Same as CLICK + CTRL outside any segment works: CLICK + SHIFT, RIGHT CLICK + CTRL, RIGHT CLICK + SHIFT outside any segment\n        await tad.demoForEndUserHide()\n        // WHEN I click outside + Shift key, THEN selection doesn't change\n        await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.row + \"_1\"), { shiftKey: true });\n        await this.assertOnlyExpectedSegmentsAreSelected([0], true);\n\n        // WHEN I right click outside + Ctrl key, THEN selection doesn't change\n        rightClick(tad.screenCapturing.getByTestId(testids.row + \"_1\"), { ctrlKey: true });\n        await this.assertOnlyExpectedSegmentsAreSelected([0], true);\n\n        // WHEN I click outside + Shift key, THEN selection doesn't change\n        rightClick(tad.screenCapturing.getByTestId(testids.row + \"_1\"), { shiftKey: true });\n        await this.assertOnlyExpectedSegmentsAreSelected([0], true);\n        tad.demoForEndUserShow();\n    }\n\n    @Scenario(\"WHEN click outside segments, THEN the selection becomes empty\")\n    @ScenarioOptions({linkWithNextScenario: true})\n    async whenClickOutside() {\n         // WHEN left click on row, THEN no segment is selected\n         tad.cc(\"Left click outside any segment\");\n         await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.row + \"_1\"));\n         await tad.showSpotlight({ message: \"No segment is selected\", focusOnLastElementCaptured: false });\n         await this.assertOnlyExpectedSegmentsAreSelected([]);\n \n         //=======HIDDEN TESTS (Not interesting for the user)==========\n         // GIVEN a segment is selected\n         tad.demoForEndUserHide();\n         rightClick(tad.screenCapturing.getByTestId(testids.item + \"_2\"));\n         // WHEN right click on row, THEN no segment is selected\n         rightClick(tad.screenCapturing.getByTestId(testids.row + \"_1\"));\n         await this.assertOnlyExpectedSegmentsAreSelected([], true);\n         tad.demoForEndUserShow();\n    }\n\n    @Scenario(\"WHEN drag a selection rectangle over 2 segments, THEN only those 2 segments are selected\")\n    @ScenarioOptions({linkWithNextScenario: true})\n    async whenDragASelectionRectangleOverTwoSegments() {\n        await tad.showSpotlight({ message: \"I drag to select segment 0 and 3 with left mouse button\", focusOnLastElementCaptured: false });\n        await this.dragToSelect(0, 1, 3, 3);\n        await this.assertOnlyExpectedSegmentsAreSelected([0, 3]);\n    }\n    \n    @Scenario(\"WHEN drag a selection rectangle over another segment, THEN only that segment is selected (so the previous 2 segments are not selected any more\")\n    @ScenarioOptions({linkWithNextScenario: true})\n    async whenDragASelectionRectangleOverAnotherSegment() {\n        await tad.showSpotlight({ message: \"I drag to select segment 3 with left mouse button\", focusOnLastElementCaptured: false });\n        await this.dragToSelect(1, 1, 3, 3);\n        await this.assertOnlyExpectedSegmentsAreSelected([3]);\n        \n        //=======HIDDEN TESTS (Not interesting for the user)==========\n        // Using right mouse button works the same\n        tad.demoForEndUserHide();\n        // GIVEN nothing selected\n        await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.row + \"_1\"));\n\n        await this.dragToSelect(0, 1, 3, 3, true);\n        await this.assertOnlyExpectedSegmentsAreSelected([0, 3], true);\n\n        await this.dragToSelect(1, 1, 3, 3, true);\n        await this.assertOnlyExpectedSegmentsAreSelected([3], true);\n        tad.demoForEndUserShow();\n    }\n\n    @Scenario(\"WHEN hold CTRL + drag a selection rectangle over another segment, THEN that segment is ADDED to the selection, AND both are now selected\")\n    @ScenarioOptions({linkWithNextScenario: true})\n    async whenCTRLDragASelectionRectangleOverAnotherSegment() {\n        tad.cc(undefined);\n        await tad.showSpotlight({ message: \"I draw a rectangle containing segment 0\", focusOnLastElementCaptured: false });\n        await this.dragToSelect(0, 0, 0, 0, false, true);\n        await this.assertOnlyExpectedSegmentsAreSelected([0, 3]);\n    }\n\n    @Scenario(\"WHEN hold CTRL + drag a selection rectangle over an already selected segment, THEN that segment is REMOVED from the selection, AND only one is selected\")\n    @ScenarioOptions({linkWithNextScenario: true})\n    async whenCTRLDragASelectionRectangleOverAlreadySelectedSegment() {\n        await tad.showSpotlight({ message: \"I draw a rectangle containing segment 0 with LEFT mouse button and CTRL pressed\", focusOnLastElementCaptured: false });\n        await this.dragToSelect(1, 1, 3, 3, false, true);\n        await this.assertOnlyExpectedSegmentsAreSelected([0]);\n\n        //=======HIDDEN TESTS (Not interesting for the user)==========\n        // Same as LEFT button + CTRL works: LEFT + SHIFT, RIGHT + CTRL, RIGHT + SHIFT\n        tad.demoForEndUserHide();\n        // unselect everything\n        await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.row + \"_1\"));\n         // WHEN I draw a rectangle containing segments 0, 3 with LEFT mouse button and SHIFT pressed, THEN segments 0, 3 are added to selection\n        await this.dragToSelect(0, 1, 3, 3, true, true);\n        await this.assertOnlyExpectedSegmentsAreSelected([0, 3], true);\n        // WHEN I draw a rectangle containing segment 3  with RIGHT mouse button and CTRL pressed, THEN segment 3 is unselected\n        await this.dragToSelect(1, 1, 3, 3, true, true);\n        await this.assertOnlyExpectedSegmentsAreSelected([0], true);\n\n        // unselect everything\n        await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.row + \"_1\"));\n        // WHEN I draw a rectangle containing segments 0, 3 with LEFT mouse button and SHIFT pressed, THEN segments 0, 3 are selected\n        await this.dragToSelect(0, 1, 3, 3, false, false, true);\n        await this.assertOnlyExpectedSegmentsAreSelected([0, 3], true);\n        // WHEN I draw a rectangle containing segment 3  with LEFT mouse button and SHIFT pressed, THEN segment 3 is unselected \n        await this.dragToSelect(1, 1, 3, 3, false, false, true);\n        await this.assertOnlyExpectedSegmentsAreSelected([0], true);\n\n        // unselect everything\n        await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.row + \"_1\"));\n        // WHEN I draw a rectangle containing segments 0, 3 with RIGHT mouse button and SHIFT pressed, THEN segments 0, 3 are selected\n        await this.dragToSelect(0, 1, 3, 3, true, false, true);\n        await this.assertOnlyExpectedSegmentsAreSelected([0, 3], true);\n        // WHEN I draw a rectangle containing segment 3  with RIGHT mouse button and SHIFT pressed, , THEN segment 3 is unselected\n        await this.dragToSelect(1, 1, 3, 3, true, false, true);\n        await this.assertOnlyExpectedSegmentsAreSelected([0], true);\n\n        // Select again the segment 0\n        await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.row + \"_1\"));\n        await this.dragToSelect(0, 0, 0, 0, false, true);\n\n        tad.demoForEndUserShow();\n    }\n\n    @Scenario(\"WHEN hold CTRL + drag a selection rectangle over an empty area, THEN the selection doesn't change\")\n    @ScenarioOptions({linkWithNextScenario: true})\n    async whenCTRLDragASelectionRectangleOverAnEmptyArea() {\n        tad.cc(undefined);\n        await tad.showSpotlight({ message: \"WHEN hold CTRL + drag a selection rectangle over an empty area, THEN the selection doesn't change\", focusOnLastElementCaptured: false });\n        let startingRow = tad.screenCapturing.getByTestId(testids.row + \"_0\");\n        tad.getObjectViaCheat(Timeline).dragStart(startingRow, 5);\n        await tad.getObjectViaCheat(Timeline).dragMove(10, 10, 5);\n        tad.getObjectViaCheat(Timeline).dragEnd({ctrlKey: true});\n        await this.assertOnlyExpectedSegmentsAreSelected([0]);\n        \n        //=======HIDDEN TESTS (Not interesting for the user)==========\n        // Using right mouse button + CTRL works the same\n        tad.demoForEndUserHide();\n        let row = tad.screenCapturing.getByTestId(testids.row + \"_0\");\n        await tad.fireEventWaitable.mouseDown(row, { clientX: row.getBoundingClientRect().x + 5, clientY: row.getBoundingClientRect().y + 5, button: 2, ctrlKey: true });\n        await tad.fireEventWaitable.mouseMove(row, { clientX: 10, clientY: 10, pageX: 10, ctrlKey: true });\n        await tad.fireEventWaitable.mouseUp(row, { button: 2, ctrlKey: true });\n        await this.assertOnlyExpectedSegmentsAreSelected([0], true);\n        tad.demoForEndUserShow();\n    }\n\n    @Scenario(\"WHEN drag a selection rectangle over an empty area, THEN the selection becomes empty\") \n    @ScenarioOptions({linkWithNextScenario: true}) \n    async whenDragASelectionRectangleOverAnEmptyArea() {\n        tad.cc(undefined);\n        await tad.showSpotlight({ message: \"I drag to select outside any segments (using left mouse button)\", focusOnLastElementCaptured: false });\n        let startingRow = tad.screenCapturing.getByTestId(testids.row + \"_0\");\n        tad.getObjectViaCheat(Timeline).dragStart(startingRow, 5);\n        await tad.getObjectViaCheat(Timeline).dragMove(10, 10, 5);\n        tad.getObjectViaCheat(Timeline).dragEnd();\n        await tad.showSpotlight({ message: \"No segment is selected\", focusOnLastElementCaptured: false });\n        await this.assertOnlyExpectedSegmentsAreSelected([]);\n        \n        //=======HIDDEN TESTS (Not interesting for the user)==========\n        // Using right mouse button works the same\n        tad.demoForEndUserHide();\n        // given a selected segment\n        await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.item + \"_3\"));\n\n        let row = tad.screenCapturing.getByTestId(testids.row + \"_0\");\n        await tad.fireEventWaitable.mouseDown(row, { clientX: row.getBoundingClientRect().x + 5, clientY: row.getBoundingClientRect().y + 5, button: 2 });\n        await tad.fireEventWaitable.mouseMove(row, { clientX: 10, clientY: 10, pageX: 10 });\n        await tad.fireEventWaitable.mouseUp(row, { button: 2 });\n        await this.assertOnlyExpectedSegmentsAreSelected([], true);\n        tad.demoForEndUserShow();\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////////////\n    ////// Helper methods\n    ////////////////////////////////////////////////////////////////////////////////////////\n\n    async dragToSelect(startingRowIndex, endingRowIndex, startingSegmentIndex, endingSegmentIndex, rightClick?, ctrlKey = false, shiftKey = false) {\n        let startingRow = tad.screenCapturing.getByTestId(testids.row + \"_\" + startingRowIndex);\n        let startingRowRect = startingRow.getBoundingClientRect();\n        let endingRow = tad.screenCapturing.getByTestId(testids.row + \"_\" + endingRowIndex);\n        let endingRowRect = endingRow.getBoundingClientRect();\n        const startingSegmentRect = tad.screenCapturing.getByTestId(testids.item + \"_\" + startingSegmentIndex).getBoundingClientRect();\n        const endingSegmentRect = tad.screenCapturing.getByTestId(testids.item + \"_\" + endingSegmentIndex).getBoundingClientRect();\n        const deltaX = endingSegmentRect.x + endingSegmentRect.width - startingSegmentRect.x;\n        const deltaY = endingRowRect.y + endingRowRect.height - startingRowRect.y;\n\n        // The drag to select with right click is not a nativelly supported type of drag. So the timeline uses two implementations for supporting\n        // 1. Drag to select on left click: based on interact js library triggered by native events dragStart, dragMove, dragEnd. \n        // These events can not be tested using testing-library (we have tried using fireEvent.mouseDown, mouseOver, and mouseUp, but with no success). That's why the \"cheat\" was needed\n        // 2. Drag to select on right click: triggered by mouseDown, mouseMove, mouseUp events\n        if (rightClick) {\n            // There was a bug when having a large DPI of the screen e.g. 170\n            // Don't know why then the startingRowRect.y was not an integer (e.g. 256.789). Even if the TAD.drag() triggers the mouse event on this y floating value,\n            // when interactjs library catched this event it sees the Y as an integer (e.g. 256). Because 256.789 was the exact begining of the\n            // row, when timeline searches the row at position 256 it gets the previous row instead of the correct row. So applying Math.ceil fixed the problem \n            await tad.drag(startingRow, {from: {x: startingSegmentRect.x, y: Math.ceil(startingRowRect.y)}, to: {x: endingSegmentRect.x + endingSegmentRect.width, y: endingRowRect.y + endingRowRect.height - 5}, options: {button: 2, ctrlKey: ctrlKey, shiftKey: shiftKey}});\n        } else {\n            // 150 is the group offset\n            // we needed to subtract -5 because else the selection rectangle (that snapps to row) will get till the endingRow + 1, instead endingRow\n            tad.getObjectViaCheat(Timeline).dragStart(startingRow, startingSegmentRect.x - 150);\n            await tad.getObjectViaCheat(Timeline).dragMove(deltaX, deltaY - 5, 5);\n            tad.getObjectViaCheat(Timeline).dragEnd({ ctrlKey: ctrlKey, shiftKey: shiftKey });\n        }\n    }\n\n    async assertOnlyExpectedSegmentsAreSelected(expectedSelectedSegments: number[], demoForEndUserHide?) {\n        for (var i = 0; i < someTasks.length; i++) {\n            const segment = tad.screenCapturing.getByTestId(testids.item + \"_\" + i);\n            if (expectedSelectedSegments.indexOf(i) >= 0) {\n                tad.cc(\"Segment \" + i + \" is selected (has resize anchors, brighter color and shadow effect)\");\n                // await tad.assertWaitable.include(Array.from(segment.classList), \"rct9k-items-outer-selected\");\n                assert.include(Array.from(segment.classList), \"rct9k-items-outer-selected\");\n            } else {\n                tad.demoForEndUserHide();\n                // await tad.assertWaitable.notInclude(Array.from(segment.classList), \"rct9k-items-outer-selected\");\n                assert.notInclude(Array.from(segment.classList), \"rct9k-items-outer-selected\");\n                !demoForEndUserHide && tad.demoForEndUserShow();\n            }\n        }\n\n        assert.equal(tad.screenCapturing.getByTestId(selectionStoryTestIds.selectedItemsSpan).textContent, expectedSelectedSegments.sort().join(\", \"));\n    }\n}"},"duration":411}