{"slides":[{"screenshot":"Timeline_splitPaneResizer","sourceFile":"TableTestsAreDemo.tsx","sourceLine":63}],"sourceFiles":{"TableTestsAreDemo.tsx":"import { Scenario, render, tad } from \"@famiprog-foundation/tests-are-demo\";\nimport { assert } from \"chai\";\nimport { Table } from \"fixed-data-table-2\";\nimport { ProvidingCustomTable } from \"../stories/table/Table.stories\";\nimport { DEMO_TABLE_WIDTH, tableTestIds } from \"../stories/table/TableScenarios\";\nimport { TABLE_OFFSET, timelineTestids as testids } from \"../../../src/timeline\";\n\nexport class TableTestsAreDemo {\n    async before() {\n        render(<ProvidingCustomTable/>);\n        // When pressing run the second time the state of the scrollbars are not reset\n        // I thought that render() should reset its state, but it doesn't.\n        tad.screenCapturing.getByTestId(testids.ganttBody).scroll({top:0});\n        // TODO DB By running the tests second time, the SplitPane test fails because we need to reset its position\n        // Maybe a general mechanism of test sate reset is needed\n    }\n    \n    @Scenario(\"Both table and gantt diagram have same rows height\")\n    async bothTableAndGanttHaveSameRowHeight() {\n        // Nu le putem verifica pe toate caci gridul este virtualizat\n        for (var i = 0; i < 5; i++)  {\n            let ganttRow = tad.screenCapturing.getByTestId(testids.row + \"_\" + i);\n            let tableCell = tad.screenCapturing.getByTestId(tableTestIds.row + \"_\" + i);\n            if (i < 4) { \n                tad.cc(\"Table row \"  + (i + 1) + \" and  gantt row \" + (i + 1) + \" have same height\");\n            } else {\n                tad.cc(\"And so on... \");\n            }\n            await tad.assertWaitable.equal(ganttRow.offsetHeight, (tableCell as HTMLElement).offsetHeight);\n        }\n    }\n\n    @Scenario(\"When scrolling in gantt the table is scrolled\")\n    async whenScrollInGanttThenTableIsScrolled() {\n        // We don't focus on last element captured because its height occupies the entire page\n        // And the message appears under the gantt and is hidded by the scroll mechanism \n        await tad.showSpotlight({ message: \"Gantt is scrolled => Table is scrolled accordingly\", focusOnLastElementCaptured: false });\n        tad.screenCapturing.getByTestId(testids.ganttBody).scroll({top:100});\n    \n        // This is needed in order for the scroll handler to be triggerd before the verification  \n        await new Promise(r => setTimeout(r, 10));\n\n        // We \"cheated\" here because\n        // There is no strait forward way to see the scroll position by looking at the html elements\n        // Because the table has a special type of scrolling mechanism by absolute positioning (with translate3d) \n        // the rows. \n        // We could have looked at the position of the first row but it was offseted with the\n        // height of the header in order to appear right under it. So we should have placed a data-testid on the header also\n        // but being in a third library component this was not simple to implement\n        assert.equal((tad.getObjectViaCheat(Table) as Table).props.scrollTop, 100);\n    }\n\n    @Scenario(\"When scrolling in table the gantt is scrolled\")\n    async whenScrollInTableThenGanttIsScrolled() {\n        await tad.showSpotlight({ message: \"Table is scrolled => Gantt is scrolled accordingly\", focusOnLastElementCaptured: false });\n        (tad.getObjectViaCheat(Table) as Table).scrollActions.scrollToY(300);\n        assert.equal(tad.screenCapturing.getByTestId(testids.ganttBody).scrollTop, 300);\n    }\n\n    @Scenario(\"When drag the split pane the table is resized accordingly\")\n    async whenDragTheSplitPaneTheTableIsResizedAccordingly() {\n        tad.cc(\"Split pane resizer is dragged\");\n        await tad.drag(tad.screenCapturing.getByTestId(testids.splitPaneResizer), { delta: { x: 150, y: 0 }});\n        assert.equal((tad.getObjectViaCheat(Table) as Table).props.width, DEMO_TABLE_WIDTH + TABLE_OFFSET + 150);\n    }\n}"},"duration":1320,"error":"AssertionError: expected 725 to equal 425\n\t  at TableTestsAreDemo.whenDragTheSplitPaneTheTableIsResizedAccordingly [assert.equal((tad.getObjectViaCheat(Table) as Table).props.width, DEMO_TABLE_WIDTH + TABLE_OFFSET + 150);] (http://localhost:3000TableTestsAreDemo.tsx:64:16)"}